///////////////////////////////////////////////////////////////////////////
// INCLUDES ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// MACROS /////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// TYPE DEFINITIONS ///////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
typedef struct {
	uint32_t currentClusterNumber; 		// consists of the current cluster number we are on
	uint32_t nextClusterNumber; 		// consists of the next cluster number in the cluster chain
	uint32_t FATEntrySectorNumber;		// holds the sector number of the FAT entry
	uint32_t FATEntryByteOffset;		// holds the byte offset FROM the sector number of the FAT entry
} fatEntry;

///////////////////////////////////////////////////////////////////////////
// FUNCTION DECLARATIONS //////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

// In:			thisBootSector (bootSector (struct)), clusterNumber (uint32_t)
// Out:			thisFatEntry (fatEntry (struct))
// Purpose:		to create a fatEntry struct for convenienve in moving through clusters and to abstract cluster chain logic	
// Notes:
fatEntry getFatEntry(bootSector thisBootSector, uint32_t clusterNumber);


